package file

import (
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"unicode/utf8"
)

// ProcessFiles –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–∫—Å–∫–æ–º(txt) –≤ –æ–¥–∏–Ω txt —Ñ–∞–π–ª
func ProcessFiles(repoPath, outputFilePath string, log io.Writer) error {
	fmt.Fprintln(log, "üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º...")

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		fmt.Fprintln(log, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", err)
		return err
	}
	defer outputFile.Close()

	// –î–µ–ª–∞–µ–º –æ–±—Ö–æ–¥ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
	err = filepath.WalkDir(repoPath, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			fmt.Fprint(log, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ —Ñ–∞–π–ª–æ–≤:", err)
			return err
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞–ø–∫–∏
		if d.IsDir() {
			skipFolder := map[string]bool{
				".git":    true,
				".vscode": true,
				".idea":   true,
				".cache":  true,
				".env":    true,
			}
			if skipFolder[filepath.Base(path)] {
				fmt.Fprintln(log, "üìÇ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É:", path)
				return filepath.SkipDir
			}
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–∞–ø–∫–∞
		if !d.IsDir() {
			content, err := os.ReadFile(path)
			if err != nil {
				fmt.Fprintln(log, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", path, err)
				return nil
			}

			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ UTF-8
			if !utf8.Valid(content) {
				fmt.Fprintln(log, "üìñ –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8:", path)
				return nil
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –æ–±—â–∏–π TXT —Ñ–∞–π–ª
			_, err = outputFile.WriteString(fmt.Sprintf("\nFile: %s\n\n%s\n", path, string(content)))
			if err != nil {
				fmt.Fprintln(log, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:", outputFilePath, err)
			}
		}
		return nil
	})

	if err != nil {
		fmt.Fprintln(log, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:", err)
		return err
	}

	fmt.Fprintln(log, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	return nil
}
